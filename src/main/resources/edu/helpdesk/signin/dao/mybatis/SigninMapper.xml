<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.helpdesk.signin.dao.mybatis.SigninMapper">

	<resultMap id="CorrectionRequestMapper" type="edu.helpdesk.signin.model.dto.CorrectionRequestDto">
		<id     property="id"                  column="CorrectionRequestId" />
		<result property="status"              column="CorrectionRequestStatusName" />
		<result property="signinId"            column="SigninDataId" />
		<result property="submitter"           column="SubmitterEmployeeId" />
		<result property="completer"           column="CompleterEmployeeId" />
		<result property="newSigninTime"       column="NewSigninTime" />
		<result property="newSignoutTime"      column="NewSignoutTime" />
		<result property="originalSigninTime"  column="OriginalSigninTime" />
		<result property="originalSignoutTime" column="OriginalSignoutTime" />
	</resultMap>

	<resultMap id="WorkSessionMapper" type="edu.helpdesk.signin.model.dto.WorkSession">
		<id property="id" column="Id" />
		<result property="employeeId" column="EmployeeId" />
		<result property="signinTime" column="SigninTime" />
		<result property="signoutTime" column="SignoutTime" />
		<result property="type" column="SigninType" />
	</resultMap>
	
	<sql id="deleteAllSigninSessionsForUser">
		DELETE FROM SigninData
		WHERE EmployeeId = @EmployeeId;
	</sql>
	
	<sql id="deleteAllCorrectionRequestsForUser">
		DELETE FROM CorrectionRequest
		WHERE SubmitterEmployeeId = @EmployeeId;
	</sql>
	
	<sql id="updateAllCorrectionRequestsApprovedByUser">
		UPDATE CorrectionRequest
		SET CompleterEmployeeId = NULL
		WHERE CompleterEmployeeId = @EmployeeId;
	</sql>
	
	<sql id="CorrectionRequestSelectFragment">
		SELECT
			cr.CorrectionRequestId,
			cs.CorrectionRequestStatusName,
			cr.SigninDataId,
			cr.SubmitterEmployeeId,
			cr.CompleterEmployeeId,
			cr.NewSigninTime,
			cr.NewSignoutTime,
			cr.OriginalSigninTime,
			IF(cr.OriginalSignoutTime = 0, NULL, cr.OriginalSignoutTime) AS OriginalSignoutTime
		FROM CorrectionRequest AS cr
		LEFT JOIN CorrectionRequestStatus AS cs ON cs.CorrectionRequestStatusId = cr.CorrectionRequestStatusId
	</sql>
	
	<sql id="selectWorkSessionFragment">
		SELECT
			sd.SigninDataId AS Id,
			@EmployeeId AS EmployeeId,
			sd.SigninTime,
			IF(sd.SignoutTime = 0, NULL, sd.SignoutTime) AS SignoutTime,
			st.SigninType
		FROM SigninData AS sd
		LEFT JOIN SigninType AS st ON st.SigninTypeId = sd.SigninTypeId
	</sql>
	
	<sql id="ensureSessionsDontOverlap">
	<!-- Required Variables                                   -->
	<!-- @eid             - employee id                       -->
	<!-- @newSessionStart - The start time of the new session -->
	<!-- @newSessionEnd   - The end time of the new session   -->
	<!--    [new signin time] -->
	<!--      [existing signin time] -->
	<!--  [existing signin time] -->
	
	DROP FUNCTION IF EXISTS checkOverlap;
	CREATE FUNCTION checkOverlap(rowId INT, eid INT, newSessionStart TIMESTAMP, newSessionEnd TIMESTAMP) RETURNS INT
		BEGIN
			CREATE TEMPORARY TABLE overlappingSessions (SessionId INT) ENGINE=MEMORY; 
			INSERT INTO overlappingSessions (SessionId) SELECT
				SigninDataId FROM SigninData WHERE
					(EmployeeId = eid AND SigninDataId != rowId)
					AND
					(
					(newSessionStart &lt; SigninTime AND SigninTime &lt; newSessionEnd) 
					OR 
					(newSessionStart &lt; SignoutTime AND SignoutTime &lt; newSessionEnd)
					OR
					(SigninTime &lt; newSessionStart AND newSessionStart &lt; SignoutTime ) 
					OR 
					(SigninTime &lt; newSessionEnd AND newSessionEnd &lt; SignoutTime)
					); 
			IF (SELECT COUNT(*) FROM overlappingSessions) > 0 THEN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Session overlaps existing session data', MYSQL_ERRNO = 3141;
			END IF;
			RETURN 0;
		END;
	SET @temp = checkOverlap(@rowId, @eid, @newSessionStart, @newSessionEnd);
	</sql>
	
	
	<select id="getAllWorkSessionsForEmployee" resultMap="WorkSessionMapper">
		<!-- List<WorkSession> getAllWorkSessionsForEmployee(@Param("id") Integer id, @Param("after") Date sessionStartsAfter, @Param("before") Date sessionStartsBefore); -->
		SET @EmployeeId = #{id};
		
		<include refid="selectWorkSessionFragment" />
		WHERE
			sd.EmployeeId = @EmployeeId AND
			#{after} &lt; sd.SigninTime AND
			sd.SigninTime &lt; #{before}
			ORDER BY sd.SigninTime ASC;
	</select>
	
	<select id="getWorkSession" resultMap="WorkSessionMapper">
	<!-- WorkSession getWorkSession(@Param("id") Integer id); -->
		<include refid="selectWorkSessionFragment" />
		sd.SigninDataId = #{id};
	</select>

	<select id="doSwipe" resultMap="WorkSessionMapper">
		<!-- WorkSession doSwipe(@Param("e") Employee e, @Param("date") Date time); -->
		SET @eid = #{e.id};
		SET @date = #{date};
		
		DROP FUNCTION IF EXISTS doSwipe;
		CREATE FUNCTION doSwipe(rowId INT, eid INT, swipedTime TIMESTAMP)
			RETURNS INT
	
			BEGIN
				SET @out = 0;
				SET @type = (SELECT SigninTypeId FROM SigninType WHERE SigninType = 'SWIPE' LIMIT 1);
				IF rowId IS NULL THEN 
					INSERT INTO SigninData (EmployeeId, SigninTime, SigninTypeId, SignoutTime, CreateDate)
					VALUES (eid, swipedTime, @type, 0, UTC_TIMESTAMP());
					SET @out = LAST_INSERT_ID();
				ELSE 
					UPDATE SigninData
					SET SigninTime = SigninTime,
					SignoutTime = swipedTime
					WHERE SigninDataId = rowId;
					SET @out = rowId;
				END IF;
				RETURN @out;
			END;

		SELECT SigninDataId, IF(SigninTime = 0, @date, SigninTime) INTO @row, @newSessionStart FROM SigninData WHERE EmployeeId = @eid AND SignoutTime = 0;
		
		<!-- Make sure the session is valid -->
		SET @newSessionStart = IF(@newSessionStart = NULL, @date, @newSessionStart);
		SET @newSessionEnd = @date;
		SET @rowId = @row;
		<include refid="ensureSessionsDontOverlap" />
		
		SET @row = doSwipe(@row, @eid, @date);
		
		SELECT SigninDataId, EmployeeId, SigninTime, IF(SignoutTime = 0, NULL, SignoutTime) AS SignoutTime FROM SigninData WHERE SigninDataId = @row;
	</select>

	<select id="getAllSignedInEmployees" resultMap="edu.helpdesk.signin.dao.mybatis.EmployeeMapper.EmployeeMapper">
		<include refid="edu.helpdesk.signin.dao.mybatis.EmployeeMapper.selectStatement" />
		WHERE e.EmployeeId IN (SELECT EmployeeId FROM SigninData WHERE SignoutTime = 0);
	</select>
	
	<select id="getCorrectionRequestById" resultMap="CorrectionRequestMapper">
		<!-- CorrectionRequest getCorrectionRequestById(Integer id); -->
		<include refid="CorrectionRequestSelectFragment" />
		WHERE CorrectionRequestId = #{id};
	</select>
	
	<select id="createRequest" resultType="java.lang.Integer">
		<!-- void createRequest(@Param("c") CorrectionRequest c); -->
		SET @SigninId = #{c.signinId};
		SET @newStatus = (SELECT CorrectionRequestStatusId FROM CorrectionRequestStatus WHERE CorrectionRequestStatusName = 'PENDING' LIMIT 1);
		SET @OldTimeIn = (SELECT SigninTime FROM SigninData WHERE SigninDataId = @SigninId);
		SET @OldTimeOut = (SELECT SignoutTime FROM SigninData WHERE SigninDataId = @SigninId);
		
		SET @rowId = @SigninId;
		SET @eid = #{c.submitter.id};
		SET @newSessionStart = #{c.newSigninTime};
		SET @newSessionEnd = #{c.newSignoutTime};
		<include refid="ensureSessionsDontOverlap" />
		
		
		INSERT INTO CorrectionRequest 
			(CorrectionRequestStatusId, 
			SigninDataId, 
			SubmitterEmployeeId,
			NewSigninTime, 
			NewSignoutTime, 
			OriginalSigninTime,
			OriginalSignoutTime)
		VALUES
			(@newStatus,
			@SigninId,
			@eid,
			@newSessionStart,
			@newSessionEnd,
			@OldTimeIn,
			@OldTimeOut);
		SELECT LAST_INSERT_ID() AS Id;
	</select>

	<update id="applyCorrectionRequest">
		<!-- void applyCorrectionRequest(@Param("c") CorrectionRequest c); -->
		SET @signinId = #{c.signinId};
		SET @correctionRequestId = #{c.id};
		SET @eid = #{c.submitter.id};
		
		SET @rowId = @signinId;
		SELECT NewSigninTime, NewSignoutTime INTO @newSessionStart, @newSessionEnd FROM  CorrectionRequest WHERE CorrectionRequestId = @correctionRequestId;
		SELECT CorrectionRequestStatusId INTO @newStatus FROM CorrectionRequestStatus WHERE CorrectionRequestStatusName = 'APPROVED' LIMIT 1;
		SELECT SigninTypeId INTO @type FROM SigninType WHERE SigninType = 'CORRECTION' LIMIT 1;
		
		
		<!-- Make sure we can actually apply the request -->
		<include refid="ensureSessionsDontOverlap" />
		
		<!-- Update the timecard entry -->
		UPDATE SigninData SET
			SigninTime = @newSessionStart,
			SignoutTime = @newSessionEnd,
			SigninTypeId = @type
		WHERE
			SigninDataId = @signinId;
		
		<!-- Update the request -->
		UPDATE CorrectionRequest 
		SET 
			CorrectionRequestStatusId = @newStatus,
			CompleterEmployeeId = #{c.completer.id}
		WHERE
			CorrectionRequestId = @correctionRequestId;
			
	</update>

	<update id="rejectCorrectionRequest">
		SET @newStatus = (SELECT CorrectionRequestStatusId FROM CorrectionRequestStatus WHERE CorrectionRequestStatusName = 'DENIED' LIMIT 1);
	
		<!-- void rejectCorrectionRequest(@Param("c") CorrectionRequest c); -->
		UPDATE CorrectionRequest 
		SET 
			CorrectionRequestStatusId = @newStatus,
			CompleterEmployeeId = #{c.completer.id}
		WHERE
			CorrectionRequestId = #{c.id}
	</update>

	<select id="getAllCorrectionRequests" resultMap="CorrectionRequestMapper">
		<!-- List<CorrectionRequest> getAllCorrectionRequests(); -->
		<include refid="CorrectionRequestSelectFragment" />
	</select>

	<select id="getCorrectionRequestsByStatus" resultMap="CorrectionRequestMapper">
		<!-- List<CorrectionRequest> getCorrectionRequestsByStatus(@Param("s") List<CorrectionStatus> s); -->
		CREATE TEMPORARY TABLE Ids (CorrectionRequestStatusId INT) ENGINE=MEMORY; 
		
		<if test="s != null and s.size() > 0">
			INSERT INTO Ids (CorrectionRequestStatusId) VALUES
			<foreach collection="s" item="item" separator=",">(#{item.id})</foreach>;
		</if>
		
		<include refid="CorrectionRequestSelectFragment" />
		WHERE cr.CorrectionRequestStatusId IN (SELECT * FROM Ids);
	</select>
	
	<delete id="deleteCorrectionRequest_DEV_ONLY">
		<!-- void deleteCorrectionRequest_DEV_ONLY(@Param("id") Integer correctionRequestId); -->
		DELETE FROM CorrectionRequest
		WHERE CorrectionRequestId = #{id}
	
	</delete>

</mapper>