<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.helpdesk.signin.dao.mybatis.SigninMapper">

	<resultMap id="CorrectionRequestMapper" type="edu.helpdesk.signin.model.dto.CorrectionRequestDto">
		<id     property="id"                  column="CorrectionRequestId" />
		<result property="status"              column="CorrectionRequestStatusName" />
		<result property="signinId"            column="SigninDataId" />
		<result property="submitter"           column="SubmitterEmployeeId" />
		<result property="completer"           column="CompleterEmployeeId" />
		<result property="newSigninTime"       column="NewSigninTime" />
		<result property="newSignoutTime"      column="NewSignoutTime" />
		<result property="originalSigninTime"  column="OriginalSigninTime" />
		<result property="originalSignoutTime" column="OriginalSignoutTime" />
	</resultMap>

	<resultMap id="WorkSessionMapper" type="edu.helpdesk.signin.model.dto.WorkSession">
		<id property="id" column="SigninDataId" />
		<result property="employeeId" column="EmployeeId" />
		<result property="signinTime" column="SigninTime" />
		<result property="signoutTime" column="SignoutTime" />
	</resultMap>
	
	<sql id="CorrectionRequestSelectFragment">
		SELECT
			cr.CorrectionRequestId,
			cs.CorrectionRequestStatusName,
			cr.SigninDataId,
			cr.SubmitterEmployeeId,
			cr.CompleterEmployeeId,
			cr.NewSigninTime,
			cr.NewSignoutTime,
			cr.OriginalSigninTime,
			cr.OriginalSignoutTime
		FROM CorrectionRequest AS cr
		LEFT JOIN ON CorrectionRequestStatus AS cs WHERE cs.CorrectionRequestStatusId = cr.CorrectionRequestStatusId
	</sql>


	<select id="doSwipe" resultMap="WorkSessionMapper">
		<!-- WorkSession doSwipe(@Param("e") Employee e, @Param("date") Date time); -->
		SET @eid = #{e.id};
		SET @date = #{date};
		
		DROP FUNCTION IF EXISTS doSwipe;
		CREATE FUNCTION doSwipe(rowId INT, eid INT, swipedTime TIMESTAMP)
			RETURNS INT
	
			BEGIN
				SET @out = 0;
				IF rowId IS NULL THEN 
					INSERT INTO SigninData (EmployeeId, SigninTime, SignoutTime, CreateDate)
					VALUES (eid, swipedTime, 0, UTC_TIMESTAMP());
					SET @out = LAST_INSERT_ID();
				ELSE 
					UPDATE SigninData
					SET SigninTime = SigninTime,
					SignoutTime = swipedTime
					WHERE SigninDataId = rowId;
					SET @out = rowId;
				END IF;
				RETURN @out;
			END;

		SET @row = (SELECT SigninDataId FROM SigninData WHERE EmployeeId = @eid AND SignoutTime = 0);
		
		SET @row = doInsert(@row, @eid, @date);
		
		SELECT SigninDataId, EmployeeId, SigninTime, IF(SignoutTime = 0, NULL, SignoutTime) AS SignoutTime FROM SigninData WHERE SigninDataId = @row;
	</select>

	<select id="getAllSignedInEmployees" resultMap="edu.helpdesk.signin.dao.mybatis.EmployeeMapper.EmployeeMapper">
		<include refid="edu.helpdesk.signin.dao.mybatis.EmployeeMapper.selectStatement" />
		WHERE e.EmployeeId IN (SELECT EmployeeId FROM SigninData WHERE SignoutTime = 0);
	</select>
	
	<insert id="createRequest">
	SET @newStatus = (SELECT CorrectionRequestStatusId FROM CorrectionRequestStatus WHERE CorrectionRequestStatusName = 'PENDING' LIMIT 1);
	
		<!-- void createRequest(@Param("c") CorrectionRequest c); -->
		INSERT INTO CorrectionRequest 
			(CorrectionRequestStatusId, 
			SigninDataId, 
			SubmitterEmployeeId,
			NewSigninTime, 
			NewSignoutTime, 
			OriginalSigninTime,
			OriginalSignoutTime)
		VALUES
			(@newStatus,
			#{c.signinId},
			#{c.submitter.id},
			#{c.newSigninTime},
			#{c.newSignoutTime},
			#{c.originalSigninTime},
			#{c.originalSignoutTime})
	</insert>

	<update id="applyCorrectionRequest">
		<!-- void applyCorrectionRequest(@Param("c") CorrectionRequest c); -->
		SET @newStatus = (SELECT CorrectionRequestStatusId FROM CorrectionRequestStatus WHERE CorrectionRequestStatusName = 'APPROVED' LIMIT 1);
		
		<!-- Update the timecard entry -->
		UPDATE SigninData SET
			SigninTime = #{c.newSigninTime},
			SignoutTime = #{c.newSignoutTime},
			CorrectionRequestStatusId = @newStatus
		WHERE
			SigninDataId = #{c.signinId};
		
		<!-- Update the request -->
		UPDATE CorrectionRequest 
		SET 
			CorrectionRequestStatusId = @newStatus,
			CompleterEmployeeId = #{c.completer.id}
		WHERE
			CorrectionRequestId = #{c.id};
			
	</update>

	<update id="rejectCorrectionRequest">
		SET @newStatus = (SELECT CorrectionRequestStatusId FROM CorrectionRequestStatus WHERE CorrectionRequestStatusName = 'DENIED' LIMIT 1);
	
		<!-- void rejectCorrectionRequest(@Param("c") CorrectionRequest c); -->
		UPDATE CorrectionRequest 
		SET 
			CorrectionRequestStatusId = @newStatus,
			CompleterEmployeeId = #{c.completer.id}
		WHERE
			CorrectionRequestId = #{c.id}
	</update>

	<select id="getAllCorrectionRequests" resultMap="CorrectionRequestMapper">
		<!-- List<CorrectionRequest> getAllCorrectionRequests(); -->
		<include refid="CorrectionRequestSelectFragment" />
	</select>

	<select id="getCorrectionRequestsByStatus" resultMap="CorrectionRequestMapper">
		<!-- List<CorrectionRequest> getCorrectionRequestsByStatus(@Param("s") List<CorrectionStatus> s); -->
		CREATE TEMPORARY TABLE Ids (CorrectionRequestStatusId INT) ENGINE=MEMORY; 
		
		<if test="s != null and s.size() > 0">
			INSERT INTO Ids (CorrectionRequestStatusId) VALUES
			(<foreach collection="s" item="item" separator=",">#{item.id}</foreach>);
		</if>
		
		<include refid="CorrectionRequestSelectFragment" />
		WHERE cr.CorrectionRequestStatusId IN Ids;
	</select>

</mapper>